#ifndef MOTORDETAILS_H
#define MOTORDETAILS_H
#include "PropertyDefinition.h"
#include <QObject>
namespace {
const char CONTROL_MODE_MASK = 0x01;
const char MOTOR_MODE_MASK = 0x02;
const char SOFTWARE_ENABLE_MASK = 0x04;
const char DEBUG_MODE_MASK = 0x08;

const short MOTOR_ABOUT_TO_STALL_MASK = 0x0001;
const short DELAY_IN_READING_TEMP_SENSOR_MASK = 0x0002;
const short DELAY_IN_READING_POS_SENSOR_MASK = 0x0004;
const short INVERTER_1_TEMP_VERY_HIGH_MASK = 0x0008;
const short INVERTER_2_TEMP_VERY_HIGH_MASK = 0x0010;
const short INVERTER_3_TEMP_VERY_HIGH_MASK = 0x0020;
const short INVERTER_4_TEMP_VERY_HIGH_MASK = 0x0040;
const short INVERTER_5_TEMP_VERY_HIGH_MASK = 0x0080;

const short INVERTER_6_TEMP_VERY_HIGH_MASK = 0x0001;
const short CPU_TEMPERATURE_VERY_HIGH_MASK = 0x0002;
const short HALL_TEMPERATURE_VERY_HIGH_MASK = 0x0004;
const short DCLINK_TEMPERATURE_VERY_HIGH_MASK = 0x0008;
const short DELAY_IN_DCLINK_COMMUNICATION_MASK = 0x0010;
const short INVERTER_1_OVERCURRENT_WARNING_MASK = 0x0020;
const short INVERTER_2_OVERCURRENT_WARNING_MASK = 0x0040;
const short INVERTER_3_OVERCURRENT_WARNING_MASK = 0x0080;

const short INVERTER_4_OVERCURRENT_WARNING_MASK = 0x0001;
const short INVERTER_5_OVERCURRENT_WARNING_MASK = 0x0002;
const short INVERTER_6_OVERCURRENT_WARNING_MASK = 0x0004;
const short DC_OVERVOLTAGE_WARNING_MASK = 0x0008;
const short DC_UNDERVOLTAGE_WARNING_MASK = 0x0010;
const short CAN_COMMS_TIMEOUT_MASK = 0x0020;
const short INVERTER_1_FAULT_WARNING_MASK = 0x0040;
const short INVERTER_2_FAULT_WARNING_MASK = 0x0080;

const short INVERTER_3_FAULT_WARNING_MASK = 0x0001;
const short INVERTER_4_FAULT_WARNING_MASK = 0x0002;
const short INVERTER_5_FAULT_WARNING_MASK = 0x0004;
const short INVERTER_6_FAULT_WARNING_MASK = 0x0008;
const short CAN_SEND_WARNING_MASK = 0x0010;
const short LOST_FRAMES_ON_CAN_BUS_WARNING_MASK = 0x0020;
const short OVERSPEED_WARNING_MASK = 0x0040;
const short CPU_OVERLOAD_MASK = 0x0080;

const char TORQUE_LIMITED_MASK = 0x01;
const char START_AT_HIGH_RPM_MASK = 0x02;

const short INIT_ERROR_MASK = 0x0001;
const short SETTINGS_NOT_FOUND_MASK = 0x0002;
const short MOTOR_STALLED_MASK = 0x0004;
const short CONTROLLER_DATA_READING_TIMEOUT_MASK = 0x0008;
const short INVALID_HALL_SENSOR_SEQUENCE_MASK = 0x0010;
const short INVALID_HALL_SECTOR_MASK = 0x0020;
const short ERROR_READING_TEMP_SENSOR_MASK = 0x0040;
const short POSITION_SENSOR_READING_ERROR_MASK = 0x0080;

const short ERROR_READING_ENCODER_MASK = 0x0001;
const short ZERO_POSITION_OFFSET_NOT_SET_MASK = 0x0002;
const short HW_ENABLE_NOT_SET_MASK = 0x0004;
const short INVERTER_1_TEMP_TOO_HIGH_MASK = 0x0008;
const short INVERTER_2_TEMP_TOO_HIGH_MASK = 0x0010;
const short INVERTER_3_TEMP_TOO_HIGH_MASK = 0x0020;
const short INVERTER_4_TEMP_TOO_HIGH_MASK = 0x0040;
const short INVERTER_5_TEMP_TOO_HIGH_MASK = 0x0080;

const short INVERTER_6_TEMP_TOO_HIGH_MASK = 0x0001;
const short CPU_TEMPERATURE_TOO_HIGH_MASK = 0x0002;
const short HALL_TEMPERATURE_TOO_HIGH_MASK = 0x0004;
const short DCLINK_TEMPERATURE_TOO_HIGH_MASK = 0x0008;
const short ERROR_IN_DCLINK_COMMUNICATION_MASK = 0x0010;
const short INVERTER_1_OVERCURRENT_ERROR_MASK = 0x0020;
const short INVERTER_2_OVERCURRENT_ERROR_MASK = 0x0040;
const short INVERTER_3_OVERCURRENT_ERROR_MASK = 0x0080;

const short INVERTER_4_OVERCURRENT_ERROR_MASK = 0x0001;
const short INVERTER_5_OVERCURRENT_ERROR_MASK = 0x0002;
const short INVERTER_6_OVERCURRENT_ERROR_MASK = 0x0004;
const short DC_OVERVOLTAGE_ERROR_MASK = 0x0008;
const short DC_UNDERVOLTAGE_ERROR_MASK = 0x0010;
const short DOUBLE_CAN_ID_ON_BUS_MASK = 0x0020;
const short CAN_COMMS_TIMEOUT_ERROR_MASK = 0x0040;
const short INVERTER_1_FAULT_ERROR_MASK = 0x0080;
const short INVERTER_2_FAULT_ERROR_MASK = 0x0001;
const short INVERTER_3_FAULT_ERROR_MASK = 0x0002;
const short INVERTER_4_FAULT_ERROR_MASK = 0x0004;
const short INVERTER_5_FAULT_ERROR_MASK = 0x0008;
const short INVERTER_6_FAULT_ERROR_MASK = 0x0010;
const short CAN_SEND_ERROR_MASK = 0x0020;
const short LOST_FRAMES_ON_CAN_BUS_ERROR_MASK = 0x0040;
const short OVERSPEED_ERROR_MASK = 0x0080;

const char CPU_OVERLOADED_MASK = 0x01;
}
class MotorDetails : public QObject {
    Q_OBJECT

    DEFINE_WHOLE_NUMBER(short, ControlValue, 2, 2)

    DEFINE_BOOL(ControlMode, 4, CONTROL_MODE_MASK)
    DEFINE_BOOL(MotorMode, 4, MOTOR_MODE_MASK)
    DEFINE_BOOL(SoftwareEnable, 4, SOFTWARE_ENABLE_MASK)
    DEFINE_BOOL(DebugMode, 4, DEBUG_MODE_MASK)

    DEFINE_WHOLE_NUMBER(short, CurrentMotorTorque, 5, 2)
    DEFINE_WHOLE_NUMBER(short, CurrentRpmValue, 7, 2)

    DEFINE_WHOLE_NUMBER(char, MotorTemperature, 9, 1)

    DEFINE_WHOLE_NUMBER(short, InverterPeakCurrent, 10, 2)
    DEFINE_WHOLE_NUMBER(short, CurrentMotorPower, 12, 2)

    DEFINE_WHOLE_NUMBER(unsigned short, AbsoluteAngle, 14, 2)

    DEFINE_BOOL(MotorAboutToStall, 17, MOTOR_ABOUT_TO_STALL_MASK)
    DEFINE_BOOL(DelayInReadingTempSensor, 17, DELAY_IN_READING_TEMP_SENSOR_MASK)
    DEFINE_BOOL(DelayInReadingPosSensor, 17, DELAY_IN_READING_POS_SENSOR_MASK)
    DEFINE_BOOL(Inverter1TempVeryHigh, 17, INVERTER_1_TEMP_VERY_HIGH_MASK)
    DEFINE_BOOL(Inverter2TempVeryHigh, 17, INVERTER_2_TEMP_VERY_HIGH_MASK)
    DEFINE_BOOL(Inverter3TempVeryHigh, 17, INVERTER_3_TEMP_VERY_HIGH_MASK)
    DEFINE_BOOL(Inverter4TempVeryHigh, 17, INVERTER_4_TEMP_VERY_HIGH_MASK)
    DEFINE_BOOL(Inverter5TempVeryHigh, 17, INVERTER_5_TEMP_VERY_HIGH_MASK)

    DEFINE_BOOL(Inverter6TempVeryHigh, 19, INVERTER_6_TEMP_VERY_HIGH_MASK)
    DEFINE_BOOL(CpuTemperatureVeryHigh, 19, CPU_TEMPERATURE_VERY_HIGH_MASK)
    DEFINE_BOOL(HallTemperatureVeryHigh, 19, HALL_TEMPERATURE_VERY_HIGH_MASK)
    DEFINE_BOOL(DclinkTemperatureVeryHigh, 19, DCLINK_TEMPERATURE_VERY_HIGH_MASK)
    DEFINE_BOOL(DelayInDclinkCommunication, 19, DELAY_IN_DCLINK_COMMUNICATION_MASK)
    DEFINE_BOOL(Inverter1OverCurrentWarning, 19, INVERTER_1_OVERCURRENT_WARNING_MASK)
    DEFINE_BOOL(Inverter2OverCurrentWarning, 19, INVERTER_2_OVERCURRENT_WARNING_MASK)
    DEFINE_BOOL(Inverter3OverCurrentWarning, 19, INVERTER_3_OVERCURRENT_WARNING_MASK)

    DEFINE_BOOL(Inverter4OverCurrentWarning, 21, INVERTER_4_OVERCURRENT_WARNING_MASK)
    DEFINE_BOOL(Inverter5OverCurrentWarning, 21, INVERTER_5_OVERCURRENT_WARNING_MASK)
    DEFINE_BOOL(Inverter6OverCurrentWarning, 21, INVERTER_6_OVERCURRENT_WARNING_MASK)
    DEFINE_BOOL(DcOvervoltageWarning, 21, DC_OVERVOLTAGE_WARNING_MASK)
    DEFINE_BOOL(DcUndervoltageWarning, 21, DC_UNDERVOLTAGE_WARNING_MASK)
    DEFINE_BOOL(CanCommsTimeout, 21, CAN_COMMS_TIMEOUT_MASK)
    DEFINE_BOOL(Inverter1faultWarning, 21, INVERTER_1_FAULT_WARNING_MASK)
    DEFINE_BOOL(Inverter2faultWarning, 21, INVERTER_2_FAULT_WARNING_MASK)

    DEFINE_BOOL(Inverter3faultWarning, 23, INVERTER_3_FAULT_WARNING_MASK)
    DEFINE_BOOL(Inverter4faultWarning, 23, INVERTER_4_FAULT_WARNING_MASK)
    DEFINE_BOOL(Inverter5faultWarning, 23, INVERTER_5_FAULT_WARNING_MASK)
    DEFINE_BOOL(Inverter6faultWarning, 23, INVERTER_6_FAULT_WARNING_MASK)
    DEFINE_BOOL(CanSendWarning, 23, CAN_SEND_WARNING_MASK)
    DEFINE_BOOL(LostFramesOnCanBusWarning, 23, LOST_FRAMES_ON_CAN_BUS_WARNING_MASK)
    DEFINE_BOOL(OverspeedWarning, 23, OVERSPEED_WARNING_MASK)
    DEFINE_BOOL(CpuOverload, 23, CPU_OVERLOAD_MASK)

    DEFINE_BOOL(TorqueLimited, 24, TORQUE_LIMITED_MASK)
    DEFINE_BOOL(StartAtHighRpm, 24, START_AT_HIGH_RPM_MASK)

    DEFINE_BOOL(InitError, 26, INIT_ERROR_MASK)
    DEFINE_BOOL(SettingsNotFound, 26, SETTINGS_NOT_FOUND_MASK)
    DEFINE_BOOL(MotorStalled, 26, MOTOR_STALLED_MASK)
    DEFINE_BOOL(ControllerDataReadingTimeout, 26, CONTROLLER_DATA_READING_TIMEOUT_MASK)
    DEFINE_BOOL(InvalidHallSensorSequence, 26, INVALID_HALL_SENSOR_SEQUENCE_MASK)
    DEFINE_BOOL(InvalidHallSector, 26, INVALID_HALL_SECTOR_MASK)
    DEFINE_BOOL(ErrorReadingTempSensor, 26, ERROR_READING_TEMP_SENSOR_MASK)
    DEFINE_BOOL(PositionSensorReadingError, 26, POSITION_SENSOR_READING_ERROR_MASK)

    DEFINE_BOOL(ErrorReadingEncoder, 28, ERROR_READING_ENCODER_MASK)
    DEFINE_BOOL(ZeroPositionOffsetNotSet, 28, ZERO_POSITION_OFFSET_NOT_SET_MASK)
    DEFINE_BOOL(HwEnableNotSet, 28, HW_ENABLE_NOT_SET_MASK)
    DEFINE_BOOL(Inverter1TempTooHigh, 28, INVERTER_1_TEMP_TOO_HIGH_MASK)
    DEFINE_BOOL(Inverter2TempTooHigh, 28, INVERTER_2_TEMP_TOO_HIGH_MASK)
    DEFINE_BOOL(Inverter3TempTooHigh, 28, INVERTER_3_TEMP_TOO_HIGH_MASK)
    DEFINE_BOOL(Inverter4TempTooHigh, 28, INVERTER_4_TEMP_TOO_HIGH_MASK)
    DEFINE_BOOL(Inverter5TempTooHigh, 28, INVERTER_5_TEMP_TOO_HIGH_MASK)

    DEFINE_BOOL(Inverter6TempTooHigh, 30, INVERTER_6_TEMP_TOO_HIGH_MASK)
    DEFINE_BOOL(CpuTemperatureTooHigh, 30, CPU_TEMPERATURE_TOO_HIGH_MASK)
    DEFINE_BOOL(HallTemperatureTooHigh, 30, HALL_TEMPERATURE_TOO_HIGH_MASK)
    DEFINE_BOOL(DclinkTemperatureTooHigh, 30, DCLINK_TEMPERATURE_TOO_HIGH_MASK)
    DEFINE_BOOL(ErrorInDclinkCommunication, 30, ERROR_IN_DCLINK_COMMUNICATION_MASK)
    DEFINE_BOOL(Inverter1OvercurrentError, 30, INVERTER_1_OVERCURRENT_ERROR_MASK)
    DEFINE_BOOL(Inverter2OvercurrentError, 30, INVERTER_2_OVERCURRENT_ERROR_MASK)
    DEFINE_BOOL(Inverter3OvercurrentError, 30, INVERTER_3_OVERCURRENT_ERROR_MASK)

    DEFINE_BOOL(Inverter2FaultError, 31, INVERTER_2_FAULT_ERROR_MASK)
    DEFINE_BOOL(Inverter3FaultError, 31, INVERTER_3_FAULT_ERROR_MASK)
    DEFINE_BOOL(Inverter4FaultError, 31, INVERTER_4_FAULT_ERROR_MASK)
    DEFINE_BOOL(Inverter5FaultError, 31, INVERTER_5_FAULT_ERROR_MASK)
    DEFINE_BOOL(Inverter6FaultError, 31, INVERTER_6_FAULT_ERROR_MASK)
    DEFINE_BOOL(CanSendError, 31, CAN_SEND_ERROR_MASK)
    DEFINE_BOOL(LostFramesOnCanBusError, 31, LOST_FRAMES_ON_CAN_BUS_ERROR_MASK)
    DEFINE_BOOL(OverspeedError, 31, OVERSPEED_ERROR_MASK)

    DEFINE_BOOL(Inverter4OvercurrentError, 32, INVERTER_4_OVERCURRENT_ERROR_MASK)
    DEFINE_BOOL(Inverter5OvercurrentError, 32, INVERTER_5_OVERCURRENT_ERROR_MASK)
    DEFINE_BOOL(Inverter6OvercurrentError, 32, INVERTER_6_OVERCURRENT_ERROR_MASK)
    DEFINE_BOOL(DcOvervoltageError, 32, DC_OVERVOLTAGE_ERROR_MASK)
    DEFINE_BOOL(DcUndervoltageError, 32, DC_UNDERVOLTAGE_ERROR_MASK)
    DEFINE_BOOL(DoubleCanIdOnBus, 32, DOUBLE_CAN_ID_ON_BUS_MASK)
    DEFINE_BOOL(CanCommsTimeoutError, 32, CAN_COMMS_TIMEOUT_ERROR_MASK)
    DEFINE_BOOL(Inverter1FaultError, 32, INVERTER_1_FAULT_ERROR_MASK)

    DEFINE_BOOL(CpuOverloaded, 33, CPU_OVERLOADED_MASK)

    Q_PROPERTY(QString byteStreamStr READ byteStreamStr NOTIFY byteStreamStrChanged FINAL)
    Q_PROPERTY(QString encodedByteStreamStr READ encodedByteStreamStr NOTIFY encodedByteStreamStrChanged FINAL)

public:
    explicit MotorDetails(int motor, QObject *parent = nullptr);

    QByteArray encodedByteStream() const { return encodedByteStream_; }

    QString encodedByteStreamStr() const;
    QString byteStreamStr() const;

signals:
    void byteStreamStrChanged();
    void encodedByteStreamStrChanged();

private:
    QByteArray byteStream_;
    QByteArray encodedByteStream_;

    void updateByteStream();
};

#endif // MOTORDETAILS_H
